<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Approval">
    <!-- 사용자가 상신한 결재문서, 승인했던 결재문서, 반려했던 결재문서, 승인했지만 위에서 반려당한 결재문서, 결재해야할 문서를 조회 -->
    <select id="getList" resultType="com.kedu.ggirick_client_backend.dto.approval.ApprovalDTO">
        SELECT *
            FROM (
                SELECT a_pagination.*, ROWNUM AS rn
                    FROM (
                        SELECT a.*, e.name
                        FROM approval a
                        JOIN employee e ON a.writer=e.id
                        WHERE (
                        a.writer = #{userId}
                        OR EXISTS (
                            SELECT 1
                            FROM approval_line al_current
                            WHERE al_current.approval_id = a.id
                            AND (
                            al_current.assigner = #{userId}
                            OR al_current.assigner IN (
                                SELECT d.assigner
                                FROM approval_delegate d
                                WHERE d.delegator = #{userId}
                                AND SYSDATE BETWEEN d.start_at AND d.end_at
                            )
                        )
                        AND (
                        al_current.order_line = 0
                        OR EXISTS (
                            SELECT 1
                            FROM approval_history ah
                            WHERE ah.approval_id = a.id
                            AND ah.assigner = (
                                SELECT al_prev.assigner
                                FROM approval_line al_prev
                                WHERE al_prev.approval_id = a.id
                                AND al_prev.order_line = al_current.order_line - 1
                            )
                            AND ah.type_id NOT IN(3, 4)
                            AND ah.recorded_at BETWEEN a.updated_at AND sysdate
                            <choose>
                                <!-- box == 1 : 결재 대기 중 -->
                                <when test="box == 1">
                                    <![CDATA[
                                    AND NOT EXISTS (
                                    SELECT 1
                                    FROM approval_history ah2
                                    WHERE ah2.approval_id = a.id
                                    AND ah2.assigner = #{userId}
                                    AND ah2.type_id NOT IN (3,4)
                                    AND ah2.recorded_at BETWEEN a.updated_at AND sysdate
                                    )
                                    ]]>
                                </when>
                                <!-- box == 2 : 진행 중 (이미 결재했거나 내가 기안한 문서) -->
                                <when test="box == 2">
                                    <![CDATA[
                                    AND EXISTS (
                                    SELECT 1
                                    FROM approval_history ah2
                                    WHERE ah2.approval_id = a.id
                                    AND ah2.assigner = #{userId}
                                    AND ah2.type_id NOT IN (3,4)
                                    AND ah2.recorded_at BETWEEN a.updated_at AND sysdate
                                    )
                                    ]]>
                                </when>
                            </choose>
                        )
                    )
                )
            )
        <!-- 결재함(box)에 따른 조건 -->
        <choose>
            <!-- 전체 -->
            <when test="box == 0">
                AND a.type_id IS NULL AND a.assigned_at IS NULL
            </when>
            <!-- 결재 대기 -->
            <when test="box == 1">
                AND a.type_id IS NULL AND a.assigned_at IS NULL AND a.writer != #{userId}
            </when>
            <!-- 진행중 -->
            <when test="box == 2">
                AND a.type_id IS NULL AND a.assigned_at IS NULL
            </when>
            <!-- 결재된 문서 전체 -->
            <when test="box == 3">
                AND a.assigned_at IS NOT NULL
            </when>
            <!-- 사용자가 기안하고 승인된 문서 -->
            <when test="box == 4">
                AND a.type_id = 1 AND a.writer = #{userId}
            </when>
            <!-- 사용자가 승인하고 승인된 문서 -->
            <when test="box == 5">
                AND a.type_id = 1 AND a.writer != #{userId}
            </when>
            <!-- 반려된 문서 -->
            <when test="box == 6">
                AND a.type_id = 2
            </when>
        </choose>

        <!-- 검색 필터 -->
        <if test="searchQuery != null and searchQuery != ''">
            <choose>
                <when test="searchFilter == null || searchFilter == 0">
                    AND (a.title LIKE '%' || #{searchQuery} || '%'
                    OR a.content LIKE '%' || #{searchQuery} || '%'
                    OR e.name LIKE '%' || #{searchQuery} || '%')
                </when>
                <when test="searchFilter == 1">
                    AND a.title LIKE '%' || #{searchQuery} || '%'
                </when>
                <when test="searchFilter == 2">
                    AND e.name LIKE '%' || #{searchQuery} || '%'
                </when>
                <when test="searchFilter == 3">
                    AND a.content LIKE '%' || #{searchQuery} || '%'
                </when>
            </choose>
        </if>
        ORDER BY a.created_at DESC
        ) a_pagination
        WHERE ROWNUM &lt;=#{to}
        )
        WHERE rn &gt;=#{from}
    </select>


    <select id="getTotalPage" resultType="int">
        SELECT COUNT(*)
        FROM (
        SELECT a_pagination.*, ROWNUM AS rn
        FROM (
        SELECT a.*, e.name
        FROM approval a
        JOIN employee e ON a.writer=e.id
        WHERE (
        a.writer = #{userId}
        OR EXISTS (
        SELECT 1
        FROM approval_line al_current
        WHERE al_current.approval_id = a.id
        AND (
        al_current.assigner = #{userId}
        OR al_current.assigner IN (
        SELECT d.assigner
        FROM approval_delegate d
        WHERE d.delegator = #{userId}
        AND SYSDATE BETWEEN d.start_at AND d.end_at
        )
        )
        AND (
        al_current.order_line = 0
        OR EXISTS (
        SELECT 1
        FROM approval_history ah
        WHERE ah.approval_id = a.id
        AND ah.assigner = (
        SELECT al_prev.assigner
        FROM approval_line al_prev
        WHERE al_prev.approval_id = a.id
        AND al_prev.order_line = al_current.order_line - 1
        )
        AND ah.type_id NOT IN(3, 4)
        AND ah.recorded_at BETWEEN a.updated_at AND sysdate
        <choose>
            <!-- box == 1 : 결재 대기 중 -->
            <when test="box == 1">
                <![CDATA[
                                    AND NOT EXISTS (
                                    SELECT 1
                                    FROM approval_history ah2
                                    WHERE ah2.approval_id = a.id
                                    AND ah2.assigner = #{userId}
                                    AND ah2.type_id NOT IN (3,4)
                                    AND ah2.recorded_at BETWEEN a.updated_at AND sysdate
                                    )
                                    ]]>
            </when>
            <!-- box == 2 : 진행 중 (이미 결재했거나 내가 기안한 문서) -->
            <when test="box == 2">
                <![CDATA[
                                    AND EXISTS (
                                    SELECT 1
                                    FROM approval_history ah2
                                    WHERE ah2.approval_id = a.id
                                    AND ah2.assigner = #{userId}
                                    AND ah2.type_id NOT IN (3,4)
                                    AND ah2.recorded_at BETWEEN a.updated_at AND sysdate
                                    )
                                    ]]>
            </when>
        </choose>
        )
        )
        )
        )
        <!-- 결재함(box)에 따른 조건 -->
        <choose>
            <!-- 전체 -->
            <when test="box == 0">
                AND a.type_id IS NULL AND a.assigned_at IS NULL
            </when>
            <!-- 결재 대기 -->
            <when test="box == 1">
                AND a.type_id IS NULL AND a.assigned_at IS NULL AND a.writer != #{userId}
            </when>
            <!-- 진행중 -->
            <when test="box == 2">
                AND a.type_id IS NULL AND a.assigned_at IS NULL
            </when>
            <!-- 결재된 문서 전체 -->
            <when test="box == 3">
                AND a.assigned_at IS NOT NULL
            </when>
            <!-- 사용자가 기안하고 승인된 문서 -->
            <when test="box == 4">
                AND a.type_id = 1 AND a.writer = #{userId}
            </when>
            <!-- 사용자가 승인하고 승인된 문서 -->
            <when test="box == 5">
                AND a.type_id = 1 AND a.writer != #{userId}
            </when>
            <!-- 반려된 문서 -->
            <when test="box == 6">
                AND a.type_id = 2
            </when>
        </choose>

        <!-- 검색 필터 -->
        <if test="searchQuery != null and searchQuery != ''">
            <choose>
                <when test="searchFilter == null || searchFilter == 0">
                    AND (a.title LIKE '%' || #{searchQuery} || '%'
                    OR a.content LIKE '%' || #{searchQuery} || '%'
                    OR e.name LIKE '%' || #{searchQuery} || '%')
                </when>
                <when test="searchFilter == 1">
                    AND a.title LIKE '%' || #{searchQuery} || '%'
                </when>
                <when test="searchFilter == 2">
                    AND e.name LIKE '%' || #{searchQuery} || '%'
                </when>
                <when test="searchFilter == 3">
                    AND a.content LIKE '%' || #{searchQuery} || '%'
                </when>
            </choose>
        </if>
        ORDER BY a.created_at DESC
        ) a_pagination
        )
    </select>


    <!-- 개별 결재문서 조회 -->
    <select id="getById" resultType="com.kedu.ggirick_client_backend.dto.approval.ApprovalDTO">
        SELECT
        a.id, a.title, a.writer, a.content, a.type_id, a.doc_type_code, a.created_at, a.updated_at, a.assigned_at,
        a.doc_data AS doc_data_json,
        e.name, d.name AS department_name
        FROM approval a
        JOIN employee e ON a.writer=e.id
        JOIN employee_department ed ON ed.employee_id=e.id
        JOIN department d ON ed.department_code=d.code
        WHERE a.id=#{id}
    </select>

    <!-- 파일업로드를 위한 selectKey -->
    <insert id="insert">
        INSERT INTO approval(id, title, writer, content, created_at, doc_type_code, doc_data)
        VALUES(approval_seq.nextval, #{title}, #{writer}, #{content}, sysdate, #{docTypeCode}, #{docDataJson})
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT approval_seq.currval FROM dual
        </selectKey>
    </insert>

    <!-- 결재문서 수정 -->
    <!-- 결재문서 수정일을 기록하여 결재기록을 초기화시키기 위함 -->
    <update id="update">
        UPDATE approval SET title=#{title}, content=#{content}, updated_at=sysdate WHERE id=#{id}
    </update>

    <!-- 결재문서 상태 수정 -->
    <update id="updateType">
        UPDATE approval SET type_id=#{typeId}, assigned_at=sysdate WHERE id=#{id}
    </update>

    <!-- 결재문서 삭제 -->
    <delete id="delete">
        DELETE FROM approval WHERE id=#{id}
    </delete>

    <!-- 승인 완료된 문서만 필터 -->
    <select id="getApprovedDocsByEmployeeAndType" parameterType="map"
            resultType="com.kedu.ggirick_client_backend.dto.approval.ApprovalDTO">
        SELECT *
        FROM approval
        WHERE writer = #{employeeId}
        AND doc_type_code = #{docTypeCode}
        AND type_id = 1 <!-- 승인완료 -->
    </select>
</mapper>